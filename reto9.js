/* El tren mÃ¡gico
Los elfos estÃ¡n jugando con un tren ðŸš‚ mÃ¡gico que transporta regalos. Este tren se mueve en un tablero representado por un array de strings.

El tren estÃ¡ compuesto por una locomotora (@), seguida de sus vagones (o), y debe recoger frutas mÃ¡gicas (*) que le sirve de combustible. El movimiento del tren sigue las siguientes reglas:

RecibirÃ¡s dos parÃ¡metros board y mov.

board es un array de strings que representa el tablero:

@ es la locomotora del tren.
o son los vagones del tren.
* es una fruta mÃ¡gica.
Â· son espacios vacÃ­os.
mov es un string que indica el prÃ³ximo movimiento del tren desde la cabeza del tren @:

'L': izquierda
'R': derecha
'U': arriba
'D': abajo.
Con esta informaciÃ³n, debes devolver una cadena de texto:

'crash': Si el tren choca contra los bordes del tablero o contra sÃ­ mismo.
'eat': Si el tren recoge una fruta mÃ¡gica (*).
'none': Si avanza sin chocar ni recoger ninguna fruta mÃ¡gica.
Ejemplo:
*/

const board = [
  'Â·Â·Â·Â·Â·',
  '*Â·Â·Â·Â·',
  '@Â·Â·Â·Â·',
  'oÂ·Â·Â·Â·',
  'oÂ·Â·Â·Â·'
]

console.log(moveTrain(board, 'U'))
// âžž 'eat'
// Porque el tren se mueve hacia arriba y encuentra una fruta mÃ¡gica

console.log(moveTrain(board, 'D'))
// âžž 'crash'
// El tren se mueve hacia abajo y la cabeza se choca consigo mismo

console.log(moveTrain(board, 'L'))
// âžž 'crash'
// El tren se mueve a la izquierda y se choca contra la pared

console.log(moveTrain(board, 'R'))
// âžž 'none'
// El tren se mueve hacia derecha y hay un espacio vacÃ­o en la derecha


/**
 * @param {string[]} board - Represent the train situation
 * @param {'U' | 'D' | 'R' | 'L' } mov - Movement direction
 * @returns {'none' | 'crash' | 'eat'}
 */
function moveTrain(board, mov) {
    //SIGUE TENIENDO MALA PUNTUACIÃ“N    
    //lÃ­nea donde estÃ¡ la locomotora
    let lineaLoco
    //Ã­ndice donde estÃ¡ la locomotora en la lÃ­nea
    let locomotora

    //definimos lineaLoco y locomotora
    for(let i = 0; i < board.length; i++){
        if(board[i].includes('@')){
            lineaLoco = i
            locomotora = board[lineaLoco].indexOf('@')
        }
    }

    //si no hay locomotora, no hace nada
    if(lineaLoco === undefined || locomotora === undefined) return 'none'

    //calculo la NUEVA POSICIÃ“N segÃºn el movimiento
    const movimientos = {
        'U' : [lineaLoco - 1, locomotora],
        'D' : [lineaLoco + 1, locomotora],
        'L' : [lineaLoco, locomotora - 1],
        'R' : [lineaLoco, locomotora + 1]
    }
    
    //se establece dÃ³nde estÃ¡ la nueva locomotora y su lÃ­nea
    const [newLineaLoco, newLoco] = movimientos[mov]

    //miramos si se choca
    if(newLineaLoco < 0 || newLineaLoco > board.length - 1 || newLoco < 0 || newLoco > board[locomotora].length - 1){
        return 'crash'
    }

    let caracterNuevo = board[newLineaLoco][newLoco]
    if(caracterNuevo === '*') return 'eat'
    else if(caracterNuevo === 'o') return 'crash'
    
    return 'none'
    
}


// /**
//  * @param {string[]} board - Represent the train situation
//  * @param {'U' | 'D' | 'R' | 'L' } mov - Movement direction
//  * @returns {'none' | 'crash' | 'eat'}
//  */
// function moveTrain(board, mov) {
// //FUNCIONA BIEN PERO TERRIBLE PUNTUACIÃ“N
//     //posiciÃ³n del ARRAY donde estÃ¡ la locomotora
//     let lineaLoco
//     //Ã­ndice de la lÃ­nea donde estÃ¡ la locomotora en el string
//     let locomotora

//     //se establece el Ã­ndice de dÃ³nde estÃ¡ la locomotora en el array y en quÃ© lugar del string
//     for(let i = 0; i < board.length; i++){
//         if(board[i].includes('@')){
//             lineaLoco = i
//             locomotora = board[lineaLoco].indexOf('@')
//         }
//     }

//     //sino hay locomotora, no hace nada
//     if(lineaLoco === undefined || locomotora === undefined) return 'none'

//     switch(mov){
//         //ARRIBA
//         case 'U':
//             if(lineaLoco > 0){
//                 if(board[lineaLoco - 1].includes('*') && board[lineaLoco - 1].indexOf('*') === locomotora){
//                     return 'eat'
//                 }
//                 else if(board[lineaLoco - 1].includes('o') && board[lineaLoco - 1].indexOf('o') === locomotora){
//                     return 'crash'
//                 }
//                 else{
//                     return 'none'
//                 }
//             }
//             else{
//                 //si estÃ¡ en el primer string se choca con la pared de arriba
//                 return 'crash'
//             }
//             break
//         //DERECHA
//         case 'R':
//             if(locomotora < board[lineaLoco].length - 1){
//                 if(board[lineaLoco].charAt(locomotora + 1) === '*'){
//                     return 'eat'
//                 }
//                 else if(board[lineaLoco].charAt(locomotora + 1) === 'o'){
//                     return 'crash'
//                 }
//                 else{
//                     return 'none'
//                 }
//             }
//             else{
//                 //si la locomotora estÃ¡ a la derecha del todo se choca
//                 return 'crash'
//             }
//             break
//         //IZQUIERDA
//         case 'L':
//             if(locomotora > 0){
//                 if(board[lineaLoco].charAt(locomotora - 1) === '*'){
//                     return 'eat'
//                 }
//                 else if(board[lineaLoco].charAt(locomotora - 1) === 'o'){
//                     return 'crash'
//                 }
//                 else{
//                     return 'none'
//                 }
//             }
//             else{
//                 //si la locomotora estÃ¡ a la izquierda del todo se choca
//                 return 'crash'
//             }
//             break
//         //ABAJO
//         default:
//             if(lineaLoco < board.length - 1){
//                 if(board[lineaLoco + 1].includes('*') && board[lineaLoco + 1].indexOf('*') === locomotora){
//                     return 'eat'
//                 }
//                 else if(board[lineaLoco + 1].includes('o') && board[lineaLoco + 1].indexOf('o') === locomotora){
//                     return 'crash'
//                 }
//                 else{
//                     return 'none'
//                 }
//             }
//             else{
//                 //si estÃ¡ en la Ãºltima string se choca con la pared de abajo
//                 return 'crash'
//             }
//     }

//   }